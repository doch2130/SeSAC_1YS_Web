<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js" integrity="sha384-UW7nqtAfV9h93tGKb9+YoZynF74OcsOt5Irr6Ag4KEbqgcICQv46iB8soY/KJ+Yl" crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-3.6.1.min.js" integrity="sha384-i61gTtaoovXtAbKjo903+O55Jkn2+RtzHtvNez+yI49HAASvznhe9sZyjaSHTau9" crossorigin="anonymous"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
    <title>Document</title>
    <style>
        table, tr, td {
            border: 1px solid black;
        }
        li {
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div class="row">
        <div class="col-12" style="margin: auto; text-align: center;">
            <!-- 마지막 파일의 날짜 출력 -->
            <span id="dayTag"><%= filelist[filelist.length-1].slice(17, -8); %></span>
            <select class="form-select" aria-label="Default select example" style="display: inline; width: 10%; padding: 0px;" onchange="dateHourChange()">
                <!-- 메뉴 항목에 파일 리스트 출력 -->
                <% for (let i = 0; i < filelist.length; i++) { %>
                    <% if (i == filelist.length - 1) { %>
                        <option value="<%= filelist[i].slice(28, -5); %>" selected><%= filelist[i].slice(28, -5); %>:00</option>
                    <% } else { %>
                        <option value="<%= filelist[i].slice(28, -5); %>"><%= filelist[i].slice(28, -5); %>:00</option>
                    <% } %>
                <% } %>
            </select>
        </div>
    </div>
    <div class="row">
        <div class="col-2">              
            <select class="form-select form-select-sm" aria-label=".form-select-sm example" onchange="viewCountChange()">
                <option value="10">10개 보기</option>
                <option value="25">25개 보기</option>
                <option value="50">50개 보기</option>
                <option value="100" selected>100개 보기</option>
            </select>
        </div>
    </div>
    <table>
        <thead>
            <tr>
                <th>rank</th>
                <th>img</th>
                <th>title</th>
                <th>singer</th>
                <th>duration</th>
                <th>view</th>
            </tr>
        </thead>
        <tbody>
            <!-- 차트 데이터 자리 -->
        </tbody>
        <tfoot>
            <!-- 페이지 번호 -->
        </tfoot>
    </table>
</body>
<script>

// ejs에서 받은 json 파일 데이터를 사용하기 편리하기 위해 script 데이터로 변환하는 함수
function dataMove() {
    let temp = [];
    let obj = {};
    let title, rank, lastWeekRank, albumImg, singer, chartDuration, views, link;
    '<% for(let i = 0; i < 100; i++) { %>'
        title = '<%= data[i].title %>';
        rank = '<%= data[i].rank %>';
        lastWeekRank = '<%= data[i].lastWeekRank %>';
        albumImg = '<%= data[i].albumImg %>';
        singer = '<%= data[i].singer %>';
        chartDuration = '<%= data[i].chartDuration %>';
        views = '<%= data[i].views %>';
        link = '<%= data[i].link %>';

            obj = {
            "title": title,
            "rank": rank,
            "lastWeekRank": lastWeekRank,
            "albumImg": albumImg,
            "singer": singer,
            "chartDuration": chartDuration,
            "views": views,
            "link": link,
        }
        temp.push(obj);
    '<% } %>'

    // console.log(temp);
    return temp;
}



// select 태그에서 기본 설정 값 100 가져오기
// viewCount Change 함수는 밑에 생성
let viewCount = document.querySelectorAll('select')[1].value;
console.log(viewCount);


// 스크립트 데이터로 테이블 출력하는 함수
function tableData(data, viewCount, btnId) {
    const tbody = document.querySelector('tbody');
    let temp = '';
    
    // for(let i=0; i < data.length; i++) {
    // viewCount에 따라 데이터 출력 실행
    // btnId = 페이지 하단의 버튼에 따라서 페이지 데이터 호출,  스타트 번호 페이지번호 * 1페이지 표시 개수
    for(let i=btnId*viewCount-viewCount; i < btnId*viewCount; i++) {
        // tr.innerHTML = `
        temp += `<tr>
            <td id='${i}'>${data[i].rank}</td>
            <td><img src='${data[i].albumImg}'></td>
            <td>${data[i].title}</td>
            <td>${data[i].singer}</td>
            <td>${data[i].chartDuration}</td>
            <td>${data[i].views}</td>
            </tr>`;
    }
    tbody.innerHTML = temp;
}

// 1번 실행해서 데이터 저장
// tableData에서 사용하기 위한 변수
const ejsData = dataMove();
// 1번 실행해서 데이터 출력
// 초기 실행이라서 btnId 변수 대신에 1값 고정
tableData(ejsData, viewCount, 1);



function pageAlgo(total, bottomSize, listSize, cursor){
    // total = 총 갯수
    // bottomSize = 하단 버튼 개수
    // listSize = 화면에서 보여줄 크기
    // cursor = 현재 나의 페이지

    //한 화면에 보여줄 갯수에서 구한 하단 총 갯수 
    let totalPageSize = Math.ceil(total / listSize);

    let firstBottomNumber, lastBottomNumber;

    // 현재 페이지 버튼 % 하단 버튼 개수 == 0 인 경우 현재 버튼이 출력이 되지 않는 현상 확인
    // 3번 버튼을 누르면 하단에 4, 5, 6 버튼만 보이는 현상
    // if 조건문으로 출력되게 변경
    if(cursor%bottomSize == 0 ) {
        //하단 최초 숫자
        firstBottomNumber = cursor - cursor % bottomSize;
        //하단 마지막 숫자
        lastBottomNumber = cursor - cursor % bottomSize + bottomSize - 1;
    } else {
        //하단 최초 숫자
        firstBottomNumber = cursor - cursor % bottomSize + 1;
        //하단 마지막 숫자
        lastBottomNumber = cursor - cursor % bottomSize + bottomSize;
    }
    

    //총 갯수보다 큰 경우 방지
    if(lastBottomNumber > totalPageSize) {
        lastBottomNumber = totalPageSize;
    }

    return {
        firstBottomNumber,
        lastBottomNumber,
        totalPageSize,
        total,
        bottomSize,
        listSize,
        cursor
    }
}




// 280개의 데이터, 하단에는 20개씩, 1개화면에는 10개, 지금 나의페이지는 21
// let info = pageAlgo(280, 10, 10, 1);
// 페이지 버튼 작업을 위한 1차 작업 초기 실행행
let info = pageAlgo(ejsData.length, 3, viewCount, 1);



function pageBtn(info) {
    const tfoot = document.querySelector('tfoot');
    let temp ='';

    // 1번 페이지 인 경우 pre 버튼 dsabled 조건 걸기
    if(info.cursor == 1) {
        temp += `<ul class="pagination">
        <li class="page-item disabled" style="cursor: text";>
            <a class="page-link">pre</a>
        </li>`;
    } else {
        temp += `<ul class="pagination">
        <li class="page-item" onclick="pageBtnMove('1', ${viewCount})">
            <a class="page-link">pre</a>
        </li>`;
    }

    for (let i=info.firstBottomNumber; i <= info.lastBottomNumber; i++) {
        // 버튼 출력하다가 i가 현재 페이지랑 값이 같으면 현재 페이지 표시용 active 클래스 추가
        if (i == info.cursor) {
            temp += `<li class='page-item active' onclick="pageBtnMove('${i}', ${viewCount})"><a class="page-link">${i}</a></li>`;
        } else {
            temp += `<li class='page-item' onclick="pageBtnMove('${i}', ${viewCount})"><a class="page-link">${i}</a></li>`;
        }
    }
    // 마지막 페이지 인 경우 next 버튼 disabled 조건 걸기
    if(info.cursor == info.totalPageSize) {
        temp += `<li class="page-item disabled" style="cursor: text";>
                <a class="page-link">next</a>
            </li>
        </ul>`;
    } else {
        temp += `<li class="page-item" onclick="pageBtnMove('${info.totalPageSize}', ${viewCount})">
                <a class="page-link">next</a>
            </li>
        </ul>`;
    }
    tfoot.innerHTML = temp;
}

// 초기 실행 함수
pageBtn(info);




function pageBtnMove(btnId, viewCount) {
    console.log(btnId);

    // 페이지 번호 클릭 후 새로운 데이터 출력
    tableData(ejsData, viewCount, btnId);

    // 페이지 하단 번호 변경 작업
    let info = pageAlgo(ejsData.length, 3, viewCount, btnId);
    pageBtn(info);

    // 페이지 상단으로 이동
    window.scrollTo(0,0);
}




// viewCount Change 함수
function viewCountChange() {
    viewCount = document.querySelector('select').value;
    console.log(viewCount);

    // 페이지 출력 갯수 수정 후 새로운 데이터 출력
    // btnId = 1은 데이터 갱신 이후 1페이지로 보여지기 위한 작업
    tableData(ejsData, viewCount, 1);

    // 페이지 하단 번호 변경 작업
    // btnId = 1은 데이터 갱신 이후 1페이지로 보여지기 위한 작업
    let info = pageAlgo(ejsData.length, 3, viewCount, 1);
    pageBtn(info);

    // 페이지 상단으로 이동
    window.scrollTo(0,0);
}

</script>
</html>